1. 자료구조
    1) 배열    
        - 배열은 크기가 고정되어 있어 데이터를 추가하거나
          삭제할수 없음.
        - 변경시 새로 배열을 만들고 옮겨야 함

    2) 리스트 
        - 원소가 원소를 가리켜서 관리하는 자료구조임
        - 데이터가 추가, 삭제될 때 연결하는 정보만 바꾸면
          쉽게 추가, 삭제됨.      

    3) 스택(stack)
        - 한쪽 끝에서만 자료를 넣거나 뺄수 있는 선형 구조
        - LIFO (Last In First Out)
        - 밀어넣는다 => push
        - 넣어둔 자료를 꺼내는 것 => pop
        - 가장 최근에 푸시한 자료부터 나오게 됨
        - 맨 위 데이터부터 꺼냄  
        - 오래된 데이터가 제일 아래에 있음.

    4) 큐(queue)
        - 먼저 집어넣은 데이터가 먼저 나오는 구조
        - FIFO (First In First Out)
        - 계산대에 줄을 선 손님들의 행렬과 같은 것
        -
    
    5) 트리구조
        - 부모 노드 밑에 여러 자식 노드가 연결되고,
          자식 노드 각각에 다시 자식 노드가 연결되는 형태의 자료구조
        - 루트 노드(Root node)을 중심으로 뻗어나가는 모습이
          나무의 구조와 비슷함.

2. 컬렉션 프레임워크 구조 
    1) Iterable<E> <----------- Collection<E> <----------  List<E>
                                                           set<E>
                                Map<K,V>                           
    2) List<E> 
        - 순서가 있는 데이터 집합임
        - 추가된 데이터의 순서도 유지되며,
        - 데이터 중복도 허용됨
        - ArrayList, LinkedList, Stack, Queue, Vector

    3) Set<E>
        - 데이터의 순서가 유지되지 않는 데이터 집합임
        - 데이터 중복이 허용되지 않음
        - 중복된 데이터가 제거됨
        - HashSet, TreeSet

    4) Map<K,V>  
        - 키와 값으로 이루어진 데이터들의 집합
        - 키는 중복을 허용하지 않지만 
        - 값은 중복 될수 있음
        - HashMap, TreeMap, Hashtable, Properties                                   