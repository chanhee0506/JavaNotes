1. 인터페이스
    1) 모든 메서드가 추상 메서드로 선언함
        - public sbstract 생략됨
    2) 모든 변수는 상수로 선언됨
        - public static final 생략됨
    3) interface 인터페이스이름{
        public void makeSometing();
        public float pi = 3.14F;
    }

    4) 자바 8부터 디폴트 메서드(defalt method), 정적 메서드(static method)등 일부 구현 코드가 재현됨

2. 인터페이스 구현
    1)implements 예약어를 이용해서 코드 작성
        - class B implements A{

        }
      - 클래스의 상속은 extends 예약어 이용
      - 인터페이스의 구현은 implements 예약어 이용
      
      - 인터페이스는 다중 인터페이스 구현이 가능하다.
      -class B implements X, Y, Z{

      }

      - 상속과 인터페이스를 동시에 사용 가능
        - 먼저 상속표시를 해주고, 뒤에서 인터페이스를 필요만큼 표시해줌
      - class B extends A implements x,y,z{

      }

      - 인터페이스 한해서 인터페이스 다중 상속도 됨

3. 인터페이스 역할
    1) 클래스나 프로그램이 제공하는 기능을 명시적으로 선언
    2) 일종의 클라이언트 코드와의 약속
    3) 클래스나 프로그램이 제공하는 명세서다(specification).
    4) 클라이언트 프로그램은 인터페이스에서 선언된 메서드 명세만 보고 이를 구현한 클래스를 사용할 수 있다.
    5) 인터페이스를 구현한 다양한 객체를 사용함 (다형성)



    ***DAO
Data Access Object의 약자로, 데이터베이스의 데이터에 접근하기 위해 생성하는 객체이다.
데이터베이스에 접근하기 위한 로직과 비즈니스 로직을 분리하기 위해 사용한다.
간단하게, DB에 접속하여 데이터의 CRUD(생성, 읽기, 갱신, 삭제) 작업을 시행하는 클래스이다.
JSP 및 Servlet 페이지 내에 로직을 기술하여 사용할 수 있지만, 코드의 간결화 및 모듈화, 유지보수 등의 목적을 위해 별도의 DAO 클래스를 생성하여 사용하는 것이 좋다.

한 줄 요약 : DAO는 DB를 사용하여 데이터의 조회 및 조작하는 기능을 전담하는 오브젝트이다.

 
    ***DTO
Data Transfer Object의 약자로, 계층간 데이터 교환을 위한 자바빈즈를 뜻한다.
또한 DTO는 VO(Value Object)와 용어를 혼용해서 많이 사용하는데, VO는 읽기만 가능한 read only 속성을 가져 DTO와의 차이점이 존재한다.
일반적으로 DTO는 로직을 가지고 있지 않은 순수한 데이터의 객체이며 객체의 속성과 그 속성의 접근을 위한 getter 및 setter 메소드만을 가지고 있다.
한 줄 요약 : DTO는 VO와 혼용하여 사용하며, 순수한 데이터의 객체이다.

4.인터페이스의 여러가지 요소
    1) 상수
        - 모든 변수는 상수로 변환됨 (public static final)
    2) 추상 메서드
        - 모든 선언된 메서드는 추상 메서드 (public abstract)
    3) 디폴트 메서드 (java 8이후)
        - 구현을 가지는 메서드
        - 인터페이스를 구현하는 클래스들에서 공통으로 사용할수 있는 
          기본 메서드 
        - defalt  키워드 사용     
        - 기존 인터페이스에 새로운 기능을 추가할수 있음
        - 구현하는 클래스에서 재정의 할수 있음
    4) 정적(static) 메서드 (java 8이후)
        - 인스턴스 생성과 상관없이 인스턴스 타입으로 사용할수 있는 메서드  
    5) private 메서드 (java 9이후)
        - 인터페이스를 구현한 클래스에서 사용하거나 재정의 할수 없음
        - 인터페이스 내부에서만 사용하기 위해 구현하는 메서드
            - defalt 메서드나 static 메서드에서 사용함     

5. 여러 인터페이스 구현하기, 인터페이스의 상속
    1) 여러 인터페이스 구현하기
        - 자바의 인터페이스는 구현 코드가 없으므로 
          하나의 클래스가 여러 인터페이스를 구현할수 있음
        - 디폴트 메서드가 중복되는 경우는 클래스에서 재정의 하여야 함
    2) 인터페이스의 상속
        - 인터페이스 사이에도 상속을 사용할수 있음
        - extends 키워드를 사용
        - 인터페이스는 다중 상속이 가능하고
          구현 코드의 상속이 아니므로 타입 상속이라고 함     
    3) 클래스 상속과 인터페이스 구현 함께 사용
        - 프레임워크와 오픈소스를 함께 연동되는 구현을 하게 됨
            - 클래스 상속과 인터페이스 구현을 같이 사용하는 경우가 많음
            

