1. 스태틱(static)
    1) static 변수, static 메서드는 메서드 영역에 저장됨
    2) 프로그램 시작전에 로드되고
       프로그램 종료시 소멸됨

2. static 변수
    1) 전역 변수로 사용 
        - 어떤 객체에서도 접근해서 사용할수 있음
        - 여러 인스턴스애서 공통으로 사용하는 변수
    2) 공통으로 사용하는 변수가 필요한 경우
        - 여러 인스턴스에서 공유하는 기준 값이 필요한 경우
        - 학생마다 새로운 학번 생성
        - 카드회사에서 카드를 새로 발급할때마다 새오운 카드번호 부여
        - 회사에 사원이 입사할때 마다 새로운 사번이 필요한 경우 

    3) static 변수 선언과 사용
        - 인스턴스가 생성될때 만들어지는 변수가 아닌,
          처음 프로그램이 로딩될 때 메모리를 할당        
        - 정적 변수, 클래스 변수 (vs. 인스턴스 변수)
        - 인스턴스 생성과 상관없이 사용 가능하므로
          클래스 이름으로 직접 참조

    4) 단점
        - static 변수는 프로그램이 메모리에 있는동안
          계속 그 영역을 차지함
            - 너무 큰 메모리를 할당하는 것은 좋지 않음
        - 객체가 가지고 있는 데이터들은 외부에서 함부로 접근하여
          수정할수 없도록 해야 한다는 OOP 원칙에 위배됨.
          - 클래스 내부의 여러 메서드에서 사용하는 변수는 
            멤버 변수로 선언하는 것이 좋음
        - 상황에 적절하게 변수를 사용해야 함            
          - 멤버변수가 너무 많으면 인스턴스 생성시 쓸때없는
            메모리가 할당됨

3. static 메서드 
    1) 클래스 이름으로 호출 가능
    2) 클래스 메서드, 정적 메서드 
    3) static 매서드는 인스턴스 생성과 무관하게 클래스 이름으로
       호출될 수 있음
    4) 인스턴스 생성 전에 호출될수 있으므로
       static 메서드 내부에서는 인스턴스 변수를 사용할수 없음. 

4. 프로그램 변수 유형
    1) 변수의 유효 범위(scope)와 생성과 소멸(life cycle)은
       각 변수의 종류 마다 다름
    
    변수유형           선언위치        사용범위(scope)              메모리        생성과 소멸(life cycle)
========================================================================================================================
    지역 변수       | 매서드 내부    |   매서드 내부에서만         |  stack       |   매서드가 호출될때 생성되고    
    (로컬 변수)     |                |                            |              |  매서드가 끝나면 소멸
------------------------------------------------------------------------------------------------------------------------
    멤버 변수       | 클래스 내부   |    클래스 내부에서 사용      |   heap       |      인스턴스 생성될때 힙에 생성되고
    (인스턴스 변수) |               |   private아니면 다른 클래스  |              |    가비지 컬렉터(GC)가 메모리 수거할때
                    |              |    에서 사용이 가능하다.      |              |    소멸됨
-------------------------------------------------------------------------------------------------------------------------
    static 변수     |  클래스 내부  |     클래스 내부에서 사용      | method area   |   프로그램이 처음 시작할때 상수와 함께
    (클래스 변수)   |               |     private아니면 다른 클래스 |               |   메서드(데이터) 영역에 생성되고
                    |               |     에서 사용이 가능하다.     |               |     프로그램이 끝나고 메모리를 해지 할때
                    |               |                              |               |   소멸됨


5.디자인 패턴
    1) 생겨난 이유
        - 소프트웨어를 유연하고, 확장성있고, 유지보수가
          용이하게 만드는 것은 매우 여려운 일임
        - 무엇보다 경험이 중요 
        - 성공적인 설계라는것은 존재함 
        - GOF (Gang of Four) 네명의 학자가 좋은 설계라는 것은
          이런것이다라는 23개 패턴을 제안. 



6. static 응용 : 싱글톤 패턴 (singleton pattern)
    1) 클래스의 인스턴스는 오직 하나임을 보장하며
       이 인스턴스에 접근할 수 있는 방법을 제공하는 패턴
       - 프로그램에서 인스턴스가 단 한개만 생성되어야 하는 경우 
         사용하는 디자인 패턴
       - static 변수, static 메서드 활용하여 구현 할 수 있음  
    2) 어떤 클래스 경우에는 정확히 하나의 인스턴스만을
       갖도록 하는 것이 중요함.
       - 예) DataBase와 연결하는 connection은 여러개 일수 있지만,
             connection pool은 한개.
       - 예) 한 회사에는 하나의 회계 시스템만이 운영
    3) 싱글톤 패턴으로 회사 객체 구현
       - 생성자는 private으로 선언
       - 클래스 내부에 유일한 private 인스턴스 생성
       - 외부에서 유일한 인스턴스를 참조할 수 있는 public 메서드 제공