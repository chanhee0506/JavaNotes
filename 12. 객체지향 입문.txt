1. 객체와 클래스
    1)  클래스 
        - 객체의 청사진이다.
        - 객체를 만들어내기 위한 일종의 템플릿 
        - '실체화' 되어 있지 않으므로 메모리에 존재하지 않음
    2)  클래스는 객체를 프로그래밍에서 사용하려고
        추상화해서 기술해놓은 설계도임.
    3)  프로그래밍에서 사용하려면 설계도(클래스) 를 기초로
        실체(객체)를 만들 필요가 있음.
        -   실체화된 것을 객체(인스턴스)라고 함
        -   실체화하는 작업을 객체(인스턴스)를 생성한다고 함.
    4)  클래스라는 설계도대로 구현한 것을 메모리에 탑재해
        메모리 주소를 부여한것이 그게 객체임.
        - 객체는 클래스로부터 만들어지며 메모리를 차지함
        - 최초에 만들어질 때는 자신을 초기화하는 '생성자(constructor)'를 가짐
    
    5)  실제로 클래스를 객체로 만드는 코드는 아래와 같음
        
        클래스 타입         객체 생성
        -------             ---
        Student myStudent = new Student();     
                ---------       ----------
                (참조)변수       생성자

        -   Student 클래스의 Student() 생성자를 이용해서 
            new해서(새로 만들어서) 생성된 객체를
            메모리에 적재하고 변수 myStudent에 대입시킴.
        -   new 키워드
            - 객체가 생성되면 그 객체는 참조형이되어
              동적메모리 할당 공간(Heap)에 내용을 사용할수 있음.

    6)  this : 객체 자기자신의 주소  
        super : 조상객체의 주소           

2. 함수와 메서드 
    1) 함수 (function)
        - 하나의 기능을 수행하는 일련의 코드
        - 구현된(정의된) 함수는 호출하여 사용하고
          호출된 함수는 기능이 끝나면 제어가 반환됨
        - 함수로 구현된 하나의 기능은 여러 곳에서 동일한 방식으로
          호출되어 사용될 수 있음 
    
    2) 오버로딩(overloading)
        - 하나의 클래스 내에 매개변수 개수나 자료형은 다르지만 
          메서드명은 같은 메서드를 여러개 정의 하는 것.
        - 동일 하거나 유사한 일을 수행하는 메서드가 
          전달받는 매게변수에 따라 다른 연산을 하는 경우에 유용함.    

3. OOP 3가지 개념
    1) 캡슐화(Encapsulation)
        - 정보를 하나로 묶어주는 것
            - 예) 클래스 (속성과 동작을 묶어놓음)
    2) 추상화(Abstraction)
        - 시스템의 세부사항 중에서 중요한(관심 있는) 것과 
          중요하지 않은 (관심 없는) 것을 가려내는 과정
    3) 정보은폐(Information Hiding)
        - 사용자가 알 필요없는 정보를 감추기

4. 정보 은폐와 가시성
    1) - (private) : 
        나만 볼수 있는 것
        같은 클래스 내부에서만 접근 가능
        접근 제한을 했더라도 해당 멤버 변수를 사용할수 있는 
        메서드를 제공해서 프로그램 의도에 맞게 멤버 변수의 값을
        사용하도록 유도할수 있음.
         => setter(세터) : private 멤버변수에 값을 대입하는 메서드.
            getter(게터) : 값을 가져오는 메서드.

       + (public) : 누구나 접근 가능 
                    외부 클래스 어디에서나 접근 가능
       # (protrcted) : 부모와 자식에게만 접근 가능
                       상속 관계의 클래스에서만 접근 가능
       (아무것도 표시안함) : 디폴트 
                             같은 패키지 내부에서만 접근 가능              
