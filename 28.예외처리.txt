1. 프로그램에서의 오류 
    1) 컴파일 오류(compile error)
        - 프로그램 코드 작성 중 발행하는 문법적 오류
        - IDE 개발환경에서 대부분의 컴파일 오류는 detection 됨
    2) 실행 오류 (runtime error)
        - 실행 중인 프로그램이 의도하지 않는 동작을 하거나 중지되는 오류
        - 비정상 종료가 되는 경우 시스템의 심각한 장애가 발생할수 있음
2. 예외 처리 
    1) 프로그램이 비정상 종료를 피하여 시스템의 원할이 실행되도록 함             
    2) 오류가 발생한 경우 log를 남겨서 추후 log 분석을 통해
       그 원인을 파악하여 bug를 수정하는것이 중요

3. 오류와 예외
    1) 시스템 오류(error)
        - 프로그래머가 처리 할 수 없는 오류
        - 예) 동적 메모리가 없는 경우, 스택 메모리 오버플로우 등
    2) 예외(Exception)
        - 프로그램에서 제어할 수 있는 오류
        - 예) 읽어들이려는 파일이 존재하지 않거나,
              네트웍이나 DB 연결이 안되는 경우
        - 자바는 안정성이 중요한 언어로 대부분의 프로그램에서
          발생하는 오류에 대해 문법적으로 예외처리를 해야함.              

4. 예외 클래스들
    1) Class Exception
        - 모든 예외 클래스들의 최상위 클래스
    2) 다양한 예외들에 대해 그 처리를 위한 클래스가 제공됨
        - ArithmeticException : 정수를 0으로 나눈 경우
        - NullPointerException  : 초기화 되지않은 Object를 사용하는 경우
        - ArrayIndexOutOfBoundsException : 배열의 크기를 넘어선 위치를 참조하는 경우
        - FileNotFoundException : 참조하려는 파일이 지정된 위치에 존재하지 않는 경우
        - ClassNotFoundException : 클래스가 로드되지 않은 경우
        - InterruptedException : Thread를 Runnable하게 만들 수 있도록 사용할 수 있음

5. 예외 처리하기
    1) try ~ catch문
        - 
        - try {
            예외가 발생할 수 있는 코드 부분
        } catch(Exception e){
            try 블록 안에서 예외가 발생했을 때 예외를 처리하는 부분
        }

    2) try ~ catch ~ finally 문
        - finally 블럭에서 파일을 닫거나 네트웍을 닫는 등의
          리소스 해제 구현을 함 
        - try {} 블럭이 수행되는 경우, finally {} 블럭은 항상 수행됨

        - try {
            예외가 발생할 수 있는 코드 부분
        } catch(Exception e){
            try 블록 안에서 예외가 발생했을 때 예외를 처리하는 부분
        } finally {
            예외 발생 여부와 상관 없이 항상 수행되는 부분
            리소스를 정리하는 코드를 주로 씀
        }      

    3) try-with-resources문
        - 리소스를 사용하는 경우 close() 하지 않아도
          자동으로 해제 되도록 함
            - close()를 명시적으로 호출하지 않아도
              try{}블록에서 열린 리소스는 정상적인 경우나
              예외가 발생한 경우 => 모두 자동으로 해제됨

        - 자바 7부터 제공되는 구문
            - 리소스를 try() 내부에서 선언해야 함
        - 자바 9부터 
            - 리소스는 try() 외부에서 선언하고 
              변수만을 try(obj)와 같이 사용할 수 있음.    

        - 해당 리소스 클래스가 AutoCloseable 인터페이스를 구현해야 함
            - FileInputStream의 경우에는 AutoCloseable을 구현하고 있음.
