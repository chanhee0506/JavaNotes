1. 추상 클래스(abstract class)
    1) 의미
        - 구현 코드 없이 메서드의 선언만 있는 추상 메서드(abstract method)를 포함한 클래스.
        - 메서드 선언(declaration)
            - 반환타입,메서드 이름, 매개변수로 구성
        - 메서드 정의(definition)
            - 메서드 구현(implementation)과 동일한 의미
            - 구현부(body)를 가짐
            - { }
        - 예
            int add(int x, int y);      // 선언만. 추상메서드
            int add(int x, int y){      // 구현부가 있음. 추상메서드가 아닌 일반 메서드

            }
        - abstract 예약어를 사용
    
    2) 추상 클래스는 new 할 수 없음(인스턴스화 불가능,즉 객체 생성이 불가능)

2. 추상 클래스 구현하기
    1) 메서드에 구현 코드가 없으면 abstract로 선언
    2) abstract로 선언된 메서드를 가진 클래스는 abstract로 선언
    3) 모든 메서드가 구현된 클래스라도 abstract로 선언되면 추상 클래스로 인스턴스화 할 수 없다.
    4) 추상 클래스의 추상 메서드는 하위 클래스가 상속하여 구현
        - 추상 클래스 내의 추상 메서드 : 
                    하위 클래스가 구현해야 하는 메서드
        - 추상 클래스 내의 구현된 메서드 :
                    하위 클래스가 필요에 따라 재정의 가능

3. 템플릿 메서드 패턴
    1) 템플릿 메서드
        - 추상 메서드나 구현 된 메서드를 활용하여 코드의 흐름(시나리오)을 정의하는 메서드
        - final로 선언하여 하위 클래스에서 재정의 할 수 없게 함
        - 프레임 워크에서 많이 사용되는 설계패턴
        - 추상 클래스로 선언된 상위 클래스에서 템플릿 메서드를 활용하여 전체적인 흐름을 정의하고
          하위 클래스에서 다르게 구현하는 부분은 추상 메서드로 선언하여 하위 클래스에서 구현하도록 함

4. final 위치별 의미
        사용위치
    1) 변수 : final 변수는 상수를 의미함
    2) 메서드 : final 메서드는 하위 클래스에서 오버라이딩을 할 수 없다.
    3) 클래스 : final 클래스는 상속을 할 수 없다.