1. 의미
    1)  어쩐 조건이 성립되는 동안에 반복 처리를 실행하는 제어문임
    2)  for문을 이용한 반복
        while문을 이용한 반복
        do~while문을 이용한 반복 

2. for문
    1)  for문의 수행 순서 ①②③④
                ①       ②       ④
        for(초기화식; 조건식; 증감식) {
                ③          
            수행문;
            .....
        }


            -첫번째 루프의 흐름
                - ① => ② => ③ => ④
            -두번째 루프의 흐름        
                -  ② => ③ => ④
            -세번째 루프의 흐름        
                -  ② => ③ => ④   

    2) for문의 요소의 생략가능  
        - 초기화식 생략 
            - 이미 이전에 값이 초기화가 되어 for문 내부에서 
              값을 지정할 필요가 없는경우  

        - 조건식 생략
            - 반복 수행에 대한 조건이 수행문 내부에 
              있는 경우  

        - 증감식 생략
            - 증감식에 대한 연산이 복잡하거나
              다른 변수의 연산 결과값에 결정되는 경우    

3.  break문, continue문
    1)  break문
        -   감싸고 있는 제어문의 블록을 빠져 나오는 기능
        -   반복문에서 주로 조건문(if)와 같이 사용하여
            조건에 해당되는 경우 반복 수행을 멈추고
            반복문 외부로 수행이 이동
        -   여러 반복문이 중첩되어 있는 경우엔
            break문이 포함되어 있는 반복문만 빠져나옴    
     2) continue문
        - 반복문 내부에서 조건문(if)와 같이 사용하며,
          조건에 맞는 경우(true) 이후 반복문 블럭내부의
          다른 수행문들을 수행하지 않음    

4. while 문
    1) 조건이 참(true)인 동안 지정된 수행문을 반복수행
       하는 제어문 
    2) 조건이 맞지 않으면 반복하던 수행을 멈추게 됨 
    3) 조건은 주로 반복횟수나 값의 비교의 결과에 따라
       true, false 판단 됨 
       - 달리는 자동차, 일정 횟수만큼 돌아가는 나사못,
         특정 온도까지 가동되는 에어컨 등 
    4) 
        while(조건식) {
            수행문1;
            ....
        } 

5. do!while문
    1) 조건과 상관없이 한번은 수행문을 수행
    2) 조건과 상관없이 수행을 한번 하고나서 조건을 체크함
    3) 
        do{
            수행문1;
            ....
        }while(조건식);
            수행문2;
            ....
